# Kubernetes Dashboard Configuration
# This manifest file deploys the Kubernetes Dashboard, a web-based UI for managing
# and monitoring the Kubernetes cluster. It includes all necessary components:
# - Namespace and RBAC configuration
# - Dashboard deployment with secure settings
# - Service and Ingress for access

---
# Namespace Definition
# Creates a dedicated namespace for the Dashboard components
# This isolation helps with resource organization and access control
apiVersion: v1
kind: Namespace
metadata:
  name: kubernetes-dashboard
---
# ServiceAccount Definition
# Creates an identity for the Dashboard to operate under
# This account will be used by the Dashboard pods to interact with the Kubernetes API
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
---
# ClusterRole Definition
# Defines the permissions for the Dashboard:
# - Create and manage its own secrets and configmaps for storing certificates and settings
# - Access metrics services (heapster and dashboard-metrics-scraper)
# These minimal permissions ensure secure operation of the Dashboard
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubernetes-dashboard
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
  - apiGroups: [""]
    resources: ["services", "services/proxy"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
---
# Secrets Definition
# The Dashboard requires three secrets for secure operation:
# 1. kubernetes-dashboard-certs: Stores TLS certificates for HTTPS
# 2. kubernetes-dashboard-csrf: Protects against CSRF attacks
# 3. kubernetes-dashboard-key-holder: Stores encryption keys
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-dashboard-certs
  namespace: kubernetes-dashboard
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-dashboard-csrf
  namespace: kubernetes-dashboard
type: Opaque
data:
  csrf: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-dashboard-key-holder
  namespace: kubernetes-dashboard
type: Opaque
---
# Deployment Definition
# Configures how the Dashboard runs in the cluster:
# - Uses official dashboard image v2.7.0
# - Runs with HTTPS enabled (port 8443)
# - Auto-generates certificates for secure communication
# - Mounts secrets for certificates and temporary storage
# - Includes health check (liveness probe) for reliability
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
        - name: kubernetes-dashboard
          image: kubernetesui/dashboard:v2.7.0
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
            - --auto-generate-certificates
            - --namespace=kubernetes-dashboard
          volumeMounts:
            - name: kubernetes-dashboard-certs
              mountPath: /certs
            - name: tmp-volume
              mountPath: /tmp
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: kubernetes-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
---
# Service Definition
# Exposes the Dashboard within the cluster:
# - Creates an internal service endpoint
# - Routes HTTPS traffic (port 443 -> 8443)
# - Selects Dashboard pods using k8s-app label
kind: Service
apiVersion: v1
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    k8s-app: kubernetes-dashboard
---
# Ingress Definition
# Configures external access to the Dashboard:
# - Uses Traefik as the ingress controller
# - Enables HTTPS (TLS) access
# - Routes traffic from dashboard.rpcloud to the Dashboard service
# - Handles path-based routing with prefix matching
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  rules:
    - host: dashboard.rpcloud
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kubernetes-dashboard
                port:
                  number: 443
